// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/proto/mafia-server/mafia.proto

package mafia_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MafiaEngine_GetState_FullMethodName        = "/server.MafiaEngine/GetState"
	MafiaEngine_ConnectLobby_FullMethodName    = "/server.MafiaEngine/ConnectLobby"
	MafiaEngine_CreateLobby_FullMethodName     = "/server.MafiaEngine/CreateLobby"
	MafiaEngine_StartGame_FullMethodName       = "/server.MafiaEngine/StartGame"
	MafiaEngine_ChooseAsMafia_FullMethodName   = "/server.MafiaEngine/ChooseAsMafia"
	MafiaEngine_ChooseAsMilitia_FullMethodName = "/server.MafiaEngine/ChooseAsMilitia"
	MafiaEngine_FinishDay_FullMethodName       = "/server.MafiaEngine/FinishDay"
	MafiaEngine_Lynch_FullMethodName           = "/server.MafiaEngine/Lynch"
)

// MafiaEngineClient is the client API for MafiaEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaEngineClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error)
	ConnectLobby(ctx context.Context, in *ConnectLobbyRequest, opts ...grpc.CallOption) (*ConnectLobbyReply, error)
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyReply, error)
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameReply, error)
	ChooseAsMafia(ctx context.Context, in *ChooseAsMafiaRequest, opts ...grpc.CallOption) (*ChooseAsMafiaReply, error)
	ChooseAsMilitia(ctx context.Context, in *ChooseAsMilitiaRequest, opts ...grpc.CallOption) (*ChooseAsMilitiaReply, error)
	FinishDay(ctx context.Context, in *FinishDayRequest, opts ...grpc.CallOption) (*FinishDayReply, error)
	Lynch(ctx context.Context, in *LynchRequest, opts ...grpc.CallOption) (*LynchReply, error)
}

type mafiaEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaEngineClient(cc grpc.ClientConnInterface) MafiaEngineClient {
	return &mafiaEngineClient{cc}
}

func (c *mafiaEngineClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateReply, error) {
	out := new(GetStateReply)
	err := c.cc.Invoke(ctx, MafiaEngine_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) ConnectLobby(ctx context.Context, in *ConnectLobbyRequest, opts ...grpc.CallOption) (*ConnectLobbyReply, error) {
	out := new(ConnectLobbyReply)
	err := c.cc.Invoke(ctx, MafiaEngine_ConnectLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*CreateLobbyReply, error) {
	out := new(CreateLobbyReply)
	err := c.cc.Invoke(ctx, MafiaEngine_CreateLobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameReply, error) {
	out := new(StartGameReply)
	err := c.cc.Invoke(ctx, MafiaEngine_StartGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) ChooseAsMafia(ctx context.Context, in *ChooseAsMafiaRequest, opts ...grpc.CallOption) (*ChooseAsMafiaReply, error) {
	out := new(ChooseAsMafiaReply)
	err := c.cc.Invoke(ctx, MafiaEngine_ChooseAsMafia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) ChooseAsMilitia(ctx context.Context, in *ChooseAsMilitiaRequest, opts ...grpc.CallOption) (*ChooseAsMilitiaReply, error) {
	out := new(ChooseAsMilitiaReply)
	err := c.cc.Invoke(ctx, MafiaEngine_ChooseAsMilitia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) FinishDay(ctx context.Context, in *FinishDayRequest, opts ...grpc.CallOption) (*FinishDayReply, error) {
	out := new(FinishDayReply)
	err := c.cc.Invoke(ctx, MafiaEngine_FinishDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaEngineClient) Lynch(ctx context.Context, in *LynchRequest, opts ...grpc.CallOption) (*LynchReply, error) {
	out := new(LynchReply)
	err := c.cc.Invoke(ctx, MafiaEngine_Lynch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaEngineServer is the server API for MafiaEngine service.
// All implementations must embed UnimplementedMafiaEngineServer
// for forward compatibility
type MafiaEngineServer interface {
	GetState(context.Context, *GetStateRequest) (*GetStateReply, error)
	ConnectLobby(context.Context, *ConnectLobbyRequest) (*ConnectLobbyReply, error)
	CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyReply, error)
	StartGame(context.Context, *StartGameRequest) (*StartGameReply, error)
	ChooseAsMafia(context.Context, *ChooseAsMafiaRequest) (*ChooseAsMafiaReply, error)
	ChooseAsMilitia(context.Context, *ChooseAsMilitiaRequest) (*ChooseAsMilitiaReply, error)
	FinishDay(context.Context, *FinishDayRequest) (*FinishDayReply, error)
	Lynch(context.Context, *LynchRequest) (*LynchReply, error)
	mustEmbedUnimplementedMafiaEngineServer()
}

// UnimplementedMafiaEngineServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaEngineServer struct {
}

func (UnimplementedMafiaEngineServer) GetState(context.Context, *GetStateRequest) (*GetStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedMafiaEngineServer) ConnectLobby(context.Context, *ConnectLobbyRequest) (*ConnectLobbyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectLobby not implemented")
}
func (UnimplementedMafiaEngineServer) CreateLobby(context.Context, *CreateLobbyRequest) (*CreateLobbyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedMafiaEngineServer) StartGame(context.Context, *StartGameRequest) (*StartGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedMafiaEngineServer) ChooseAsMafia(context.Context, *ChooseAsMafiaRequest) (*ChooseAsMafiaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseAsMafia not implemented")
}
func (UnimplementedMafiaEngineServer) ChooseAsMilitia(context.Context, *ChooseAsMilitiaRequest) (*ChooseAsMilitiaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseAsMilitia not implemented")
}
func (UnimplementedMafiaEngineServer) FinishDay(context.Context, *FinishDayRequest) (*FinishDayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishDay not implemented")
}
func (UnimplementedMafiaEngineServer) Lynch(context.Context, *LynchRequest) (*LynchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lynch not implemented")
}
func (UnimplementedMafiaEngineServer) mustEmbedUnimplementedMafiaEngineServer() {}

// UnsafeMafiaEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaEngineServer will
// result in compilation errors.
type UnsafeMafiaEngineServer interface {
	mustEmbedUnimplementedMafiaEngineServer()
}

func RegisterMafiaEngineServer(s grpc.ServiceRegistrar, srv MafiaEngineServer) {
	s.RegisterService(&MafiaEngine_ServiceDesc, srv)
}

func _MafiaEngine_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_ConnectLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).ConnectLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_ConnectLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).ConnectLobby(ctx, req.(*ConnectLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_CreateLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_ChooseAsMafia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseAsMafiaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).ChooseAsMafia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_ChooseAsMafia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).ChooseAsMafia(ctx, req.(*ChooseAsMafiaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_ChooseAsMilitia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseAsMilitiaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).ChooseAsMilitia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_ChooseAsMilitia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).ChooseAsMilitia(ctx, req.(*ChooseAsMilitiaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_FinishDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).FinishDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_FinishDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).FinishDay(ctx, req.(*FinishDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaEngine_Lynch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LynchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaEngineServer).Lynch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MafiaEngine_Lynch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaEngineServer).Lynch(ctx, req.(*LynchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MafiaEngine_ServiceDesc is the grpc.ServiceDesc for MafiaEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MafiaEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.MafiaEngine",
	HandlerType: (*MafiaEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _MafiaEngine_GetState_Handler,
		},
		{
			MethodName: "ConnectLobby",
			Handler:    _MafiaEngine_ConnectLobby_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _MafiaEngine_CreateLobby_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _MafiaEngine_StartGame_Handler,
		},
		{
			MethodName: "ChooseAsMafia",
			Handler:    _MafiaEngine_ChooseAsMafia_Handler,
		},
		{
			MethodName: "ChooseAsMilitia",
			Handler:    _MafiaEngine_ChooseAsMilitia_Handler,
		},
		{
			MethodName: "FinishDay",
			Handler:    _MafiaEngine_FinishDay_Handler,
		},
		{
			MethodName: "Lynch",
			Handler:    _MafiaEngine_Lynch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/mafia-server/mafia.proto",
}
